<!--
    **************************************************************************************

    Toolkit for WPF

    Copyright (C) 2007-2019 Xceed Software Inc.

    This program is provided to you under the terms of the Microsoft Public
    License (Ms-PL) as published at https://github.com/xceedsoftware/wpftoolkit/blob/master/license.md

    For more features, controls, and fast professional support,
    pick up the Plus Edition at https://xceed.com/xceed-toolkit-plus-for-wpf/

    Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids

    **************************************************************************************
-->
<local:DemoView
    x:Class="Xceed.Wpf.Toolkit.LiveExplorer.Samples.Window.Views.StyleableWindowView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.LiveExplorer.Samples.Window.Converters"
    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit.LiveExplorer"
    xmlns:res="clr-namespace:Xceed.Wpf.Toolkit.LiveExplorer.Samples.Window.Resources"
    xmlns:view="clr-namespace:Xceed.Wpf.Toolkit.LiveExplorer.Samples.Window.Views"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    Title="StyleableWindows">
    <local:DemoView.Description>
        <Paragraph FontFamily="Segoe" FontSize="14">
            <Run>It is possible to style ChildWindow controls as well as MessageBox controls. All the chrome of their window can be styled (color, thickness, opacity); their action buttons can also be styled.</Run>
            <LineBreak />
            <LineBreak />
            <Run>The &quot;Plus&quot; version provides a new control called StyleableWindow, which consists of a window that has all the functions of a normal window, but which can be styled in the same way as ChildWindow or MessageBox.</Run>
            <LineBreak />
            <Hyperlink NavigateUri="https://xceed.com/xceed-toolkit-plus-for-wpf" RequestNavigate="Hyperlink_RequestNavigate">
                Click here for more details about Xceed Toolkit Plus for WPF.
            </Hyperlink>
        </Paragraph>
    </local:DemoView.Description>

    <local:DemoView.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Samples/Window/Resources/FancyStyles.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <conv:WindowStateToBoolConverter x:Key="windowStateBoolConv" />

            <!--  Base style for ChildWindowStyle and MessageBoxStyle  -->
            <Style x:Key="windowControlStyle" TargetType="{x:Type xctk:WindowControl}">
                <Setter Property="WindowBackground" Value="{Binding WindowBackground}" />
                <Setter Property="WindowBorderBrush" Value="{Binding WindowBorderBrush}" />
                <Setter Property="WindowBorderThickness" Value="{Binding WindowBorderThickness}" />
                <Setter Property="WindowInactiveBackground" Value="{Binding WindowInactiveBackground}" />
                <Setter Property="WindowOpacity" Value="{Binding WindowOpacity}" />
                <Setter Property="CaptionFontSize" Value="{Binding TitleFontSize}" />
                <Setter Property="CaptionForeground" Value="{Binding TitleForeground}" />
                <Setter Property="CaptionShadowBrush" Value="{Binding TitleShadowBrush}" />
                <Setter Property="CloseButtonStyle" Value="{Binding CloseButtonStyle}" />
            </Style>

            <!--  Style for the MessageBox  -->
            <Style
                x:Key="messageBoxStyle"
                BasedOn="{StaticResource windowControlStyle}"
                TargetType="{x:Type xctk:MessageBox}">
                <Setter Property="ButtonRegionBackground" Value="{StaticResource FancyButtonRegionBackground}" />
                <Setter Property="OkButtonStyle" Value="{StaticResource FancyButtonStyle}" />
                <Setter Property="CancelButtonStyle" Value="{StaticResource FancyButtonStyle}" />
                <Setter Property="YesButtonStyle" Value="{StaticResource FancyButtonStyle}" />
                <Setter Property="NoButtonStyle" Value="{StaticResource FancyButtonStyle}" />
            </Style>
        </ResourceDictionary>
    </local:DemoView.Resources>

    <local:DemoView.DataContext>
        <!--
            A model containing the brushes and other properties was created to share theses values
            between ChildWindow, MessageBox, and StyleableWindow.
        -->
        <view:WindowModel
            CloseButtonStyle="{StaticResource FancyButtonCloseStyle}"
            CloseButtonVisibility="Visible"
            MaximizeButtonStyle="{StaticResource FancyButtonMaximizeStyle}"
            MinimizeButtonStyle="{StaticResource FancyButtonMinimizeStyle}"
            ResizeMode="CanResize"
            RestoreButtonStyle="{StaticResource FancyButtonRestoreStyle}"
            TitleFontSize="15"
            TitleForeground="Brown"
            TitleShadowBrush="White"
            WindowBackground="#FFC72035"
            WindowBorderBrush="Black"
            WindowBorderThickness="2"
            WindowInactiveBackground="LightGray"
            WindowOpacity="0.75"
            WindowStyle="SingleBorderWindow" />
    </local:DemoView.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <StackPanel HorizontalAlignment="Stretch" Orientation="Horizontal" />

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <GroupBox
                Margin="5"
                VerticalAlignment="Stretch"
                Header="Features">
                <StackPanel HorizontalAlignment="Center">
                    <StackPanel Margin="0,5,0,5" Orientation="Horizontal">
                        <TextBlock
                            Width="120"
                            VerticalAlignment="Center"
                            Text="Show ChildWindow:" />
                        <CheckBox
                            Margin="5,0,0,0"
                            VerticalAlignment="Center"
                            IsChecked="{Binding WindowState, ElementName=_childWindow, Converter={StaticResource windowStateBoolConv}}" />
                    </StackPanel>
                    <StackPanel Margin="0,5,0,25" Orientation="Horizontal">
                        <TextBlock
                            Width="120"
                            VerticalAlignment="Center"
                            Text="Enable Styling:" />
                        <CheckBox
                            x:Name="_enableStyleCheckBox"
                            Margin="5,0,0,0"
                            Click="UpdateWindowsStyles"
                            IsChecked="True" />
                    </StackPanel>
                    <!--  This is a custom control that modifies the underlying model. It is defined elsewhere to avoid cluttering this XAML.  -->
                    <res:WindowModelEditor IsStyleEnabled="{Binding ElementName=_enableStyleCheckBox, Path=IsChecked}" />
                </StackPanel>
            </GroupBox>

            <DockPanel Grid.Column="1" Margin="5">
                <GroupBox
                    Margin="5"
                    HorizontalAlignment="Stretch"
                    DockPanel.Dock="Top"
                    Header="MessageBox">
                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                        <Button
                            Width="150"
                            Height="30"
                            Margin="10"
                            Click="StandardMessageBoxButton_Click"
                            Content="Show System MessageBox" />
                        <Button
                            Width="150"
                            Height="30"
                            Margin="10"
                            Click="StyledMessageBoxButton_Click"
                            Content="Show Toolkit MessageBox" />
                    </StackPanel>
                </GroupBox>
                <GroupBox
                    Margin="5"
                    HorizontalAlignment="Stretch"
                    DockPanel.Dock="Top"
                    Header="Styleable Window">
                    <Button
                        Width="160"
                        Height="30"
                        Margin="10"
                        HorizontalAlignment="Center"
                        Click="OnStyleableWindow_Click"
                        Content="Show">
                        <Button.ContentTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding}" />
                                    <TextBlock
                                        FontStyle="Oblique"
                                        FontWeight="SemiBold"
                                        Foreground="#06b025"
                                        Text=" (Plus Only)" />
                                </StackPanel>
                            </DataTemplate>
                        </Button.ContentTemplate>
                    </Button>
                </GroupBox>
                <GroupBox Margin="5" Header="ChildWindow">
                    <Border BorderBrush="Black" BorderThickness="1">
                        <xctk:WindowContainer>
                            <xctk:ChildWindow
                                x:Name="_childWindow"
                                Width="325"
                                Height="100"
                                Caption="Toolkit for WPF ChildWindow"
                                CloseButtonVisibility="{Binding CloseButtonVisibility}"
                                IsModal="True"
                                WindowStartupLocation="Center"
                                WindowState="Open"
                                WindowStyle="{Binding WindowStyle}">
                                <TextBlock>
                                    This is the content of the child window.
                                </TextBlock>
                            </xctk:ChildWindow>
                        </xctk:WindowContainer>
                    </Border>
                </GroupBox>
            </DockPanel>
        </Grid>
    </Grid>
</local:DemoView>